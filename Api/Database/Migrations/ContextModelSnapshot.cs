// <auto-generated />
using System;
using Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Database.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Api.Database.Entities.People.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshToken", "People");
                });

            modelBuilder.Entity("Api.Database.Entities.People.ResetPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ResetPassword", "People");
                });

            modelBuilder.Entity("Api.Database.Entities.People.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User", "People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 6, 27, 20, 17, 14, 870, DateTimeKind.Local).AddTicks(6053),
                            Email = "myadminuser@email.com",
                            Name = "My Admin User",
                            PasswordHash = new byte[] { 166, 120, 63, 191, 102, 163, 209, 4, 177, 52, 39, 192, 207, 69, 203, 253, 91, 181, 158, 43, 76, 74, 130, 133, 132, 93, 70, 135, 93, 161, 87, 43, 228, 180, 10, 167, 109, 212, 131, 152, 14, 38, 155, 35, 247, 120, 252, 130, 71, 29, 97, 65, 170, 19, 83, 23, 64, 196, 199, 38, 33, 179, 214, 85 },
                            PasswordSalt = new byte[] { 12, 204, 72, 205, 114, 13, 109, 122, 159, 55, 153, 128, 78, 112, 237, 18, 245, 153, 95, 205, 92, 67, 129, 16, 138, 69, 63, 75, 196, 135, 227, 165, 242, 121, 246, 177, 32, 205, 93, 187, 126, 246, 48, 21, 244, 70, 179, 216, 65, 133, 182, 97, 144, 241, 0, 102, 160, 56, 28, 125, 76, 40, 230, 39, 50, 81, 165, 115, 140, 189, 243, 59, 173, 150, 221, 250, 247, 237, 100, 81, 81, 140, 215, 152, 191, 31, 116, 170, 95, 179, 127, 28, 34, 131, 186, 164, 216, 175, 64, 27, 83, 158, 111, 10, 132, 86, 163, 147, 56, 231, 32, 19, 179, 73, 130, 110, 33, 98, 253, 211, 240, 206, 34, 85, 132, 65, 179, 137 },
                            Username = "MyAdminUser",
                            VerifiedAt = new DateTime(2022, 6, 27, 20, 17, 14, 870, DateTimeKind.Local).AddTicks(6067)
                        });
                });

            modelBuilder.Entity("Api.Database.Entities.People.UserRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", "People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 6, 27, 20, 17, 14, 870, DateTimeKind.Local).AddTicks(6190),
                            Role = "Admin",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 6, 27, 20, 17, 14, 870, DateTimeKind.Local).AddTicks(6193),
                            Role = "User",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Api.Database.Entities.People.VerifyEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("VerifyEmail", "People");
                });

            modelBuilder.Entity("Api.Database.Entities.People.RefreshToken", b =>
                {
                    b.HasOne("Api.Database.Entities.People.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("Api.Database.Entities.People.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Database.Entities.People.ResetPassword", b =>
                {
                    b.HasOne("Api.Database.Entities.People.User", "User")
                        .WithOne("ResetPassword")
                        .HasForeignKey("Api.Database.Entities.People.ResetPassword", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Database.Entities.People.UserRoles", b =>
                {
                    b.HasOne("Api.Database.Entities.People.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Database.Entities.People.VerifyEmail", b =>
                {
                    b.HasOne("Api.Database.Entities.People.User", "User")
                        .WithOne("VerifyEmail")
                        .HasForeignKey("Api.Database.Entities.People.VerifyEmail", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Database.Entities.People.User", b =>
                {
                    b.Navigation("RefreshToken");

                    b.Navigation("ResetPassword");

                    b.Navigation("UserRoles");

                    b.Navigation("VerifyEmail");
                });
#pragma warning restore 612, 618
        }
    }
}
