// <auto-generated />
using System;
using Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Database.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220628130619_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Api.Database.Entities.People.TokenFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("TokenFunction", "People");
                });

            modelBuilder.Entity("Api.Database.Entities.People.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User", "People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 6, 28, 10, 6, 19, 729, DateTimeKind.Local).AddTicks(1797),
                            Email = "myadminuser@email.com",
                            Name = "My Admin User",
                            PasswordHash = new byte[] { 14, 83, 84, 233, 156, 115, 68, 150, 44, 37, 248, 57, 187, 45, 123, 72, 169, 177, 156, 247, 170, 49, 208, 107, 210, 157, 215, 67, 186, 35, 94, 64, 77, 140, 58, 233, 80, 7, 251, 45, 47, 106, 88, 115, 213, 237, 33, 188, 206, 58, 181, 54, 19, 9, 171, 254, 205, 62, 54, 162, 147, 105, 120, 112 },
                            PasswordSalt = new byte[] { 245, 30, 239, 62, 102, 19, 232, 143, 234, 129, 253, 94, 106, 254, 160, 76, 182, 75, 224, 129, 85, 128, 21, 12, 164, 208, 61, 146, 51, 152, 221, 136, 201, 60, 231, 87, 172, 49, 188, 39, 118, 255, 221, 54, 23, 213, 107, 23, 249, 123, 56, 225, 215, 146, 77, 21, 187, 45, 219, 232, 12, 193, 133, 229, 204, 87, 52, 123, 198, 11, 56, 18, 2, 79, 86, 39, 113, 45, 225, 46, 106, 14, 210, 224, 1, 97, 145, 143, 175, 20, 133, 104, 143, 143, 212, 54, 64, 143, 119, 137, 28, 42, 51, 41, 211, 23, 146, 203, 190, 50, 32, 20, 137, 250, 169, 20, 27, 228, 20, 102, 243, 102, 242, 207, 250, 173, 123, 82 },
                            Username = "MyAdminUser",
                            VerifiedAt = new DateTime(2022, 6, 28, 10, 6, 19, 729, DateTimeKind.Local).AddTicks(1811)
                        });
                });

            modelBuilder.Entity("Api.Database.Entities.People.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", "People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 6, 28, 10, 6, 19, 729, DateTimeKind.Local).AddTicks(1930),
                            Role = "Admin",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 6, 28, 10, 6, 19, 729, DateTimeKind.Local).AddTicks(1932),
                            Role = "User",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Api.Database.Entities.People.TokenFunction", b =>
                {
                    b.HasOne("Api.Database.Entities.People.User", "User")
                        .WithMany("TokenFunction")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Database.Entities.People.UserRole", b =>
                {
                    b.HasOne("Api.Database.Entities.People.User", "User")
                        .WithMany("UserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Database.Entities.People.User", b =>
                {
                    b.Navigation("TokenFunction");

                    b.Navigation("UserRole");
                });
#pragma warning restore 612, 618
        }
    }
}
