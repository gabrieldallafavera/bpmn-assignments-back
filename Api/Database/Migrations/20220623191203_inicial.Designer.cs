// <auto-generated />
using System;
using Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Api.Database.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220623191203_inicial")]
    partial class inicial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Api.Database.Entities.People.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User", "People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 6, 23, 16, 12, 3, 740, DateTimeKind.Local).AddTicks(6632),
                            Email = "myadminuser@email.com",
                            Name = "My Admin User",
                            PasswordHash = new byte[] { 169, 123, 157, 160, 130, 71, 130, 24, 62, 177, 64, 236, 186, 202, 215, 101, 246, 130, 112, 113, 222, 172, 30, 228, 114, 209, 33, 244, 71, 61, 36, 147, 219, 198, 196, 156, 217, 236, 73, 8, 134, 154, 113, 51, 59, 161, 29, 194, 177, 48, 72, 118, 0, 241, 16, 145, 154, 120, 9, 183, 68, 133, 169, 223 },
                            PasswordSalt = new byte[] { 254, 180, 151, 14, 97, 28, 100, 179, 221, 42, 250, 208, 214, 46, 171, 157, 248, 8, 96, 235, 118, 153, 164, 225, 90, 67, 41, 164, 247, 194, 248, 67, 6, 63, 93, 203, 98, 87, 139, 145, 237, 176, 204, 170, 8, 145, 242, 61, 77, 75, 11, 251, 222, 150, 201, 72, 125, 250, 67, 180, 98, 117, 125, 27, 212, 252, 2, 62, 178, 144, 121, 130, 172, 100, 100, 18, 183, 5, 154, 15, 192, 207, 184, 145, 40, 4, 16, 0, 99, 40, 53, 31, 90, 15, 177, 67, 206, 230, 127, 223, 160, 99, 167, 45, 24, 171, 18, 74, 214, 229, 185, 23, 150, 142, 138, 41, 108, 37, 68, 245, 55, 8, 191, 154, 242, 161, 188, 224 },
                            RefreshToken = "",
                            Role = "Admin",
                            TokenCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpires = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "MyAdminUser"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
